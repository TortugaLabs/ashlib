###$_begin-include: mk/prologue.mk
SNIPPETS=$(shell find . -maxdepth 1 -type f '(' -name '*.sh' -o -name '*.bash' ')' | sed -e 's!^./!!' )
SUBDIRS=$(shell find . -mindepth 1 -maxdepth 1 -type d ! -name .git)

#~ dir_has_binder=$(shell [ -f binder.py ] && echo yes)
#~ ifeq ($(dir_has_binder),yes)
#~ BINDER=python3 binder.py
#~ else
#~ BINDER=python3 ../binder.py
#~ endif
###$_end-include: mk/prologue.mk

###$_begin-include: mk/todo.mk
todo:
	@x= ; for s in $(SNIPPETS) ; do x="$$(echo $$x $$(grep -q -e '#\$$' $$s || echo $$s))" ; done ; [ -n "$$x" ] && echo "Missing doc-block: $$x" || :
	@x= ; for s in $(SNIPPETS) ; do x="$$(echo $$x $$(grep -q -e 'xatf_init' $$s || echo $$s))" ; done ; [ -n "$$x" ] && echo "Missing unit-test: $$x" || :
	@x= ; for s in $(SNIPPETS) ; do x="$$(echo $$x $$(grep -q -e 'TODO' $$s && echo $$s))" ; done ; [ -n "$$x" ] && echo "TODO(technical-debt): $$x" || :
	@for i in $(SUBDIRS) ; do \
	  [ ! -f $$i/Makefile ] && continue ; \
	  grep -q '^todo:' $$i/Makefile || continue ; \
	  make --no-print-directory -C "$$i" todo ; \
	done
###$_end-include: mk/todo.mk

###$_begin-include: mk/Kyuafile.mk
Kyuafile: $(SNIPPETS)
	@(echo '-- Autogenerated file';echo 'syntax(2)';echo "test_suite('ashlib')"; \
	x=;for s in $(SNIPPETS) ; do x="$$(echo $$x $$(grep -q -e 'xatf_init' $$s && echo $$s))" ; done ; \
	for s in $$x ; do echo "atf_test_program{name='$$s'}" ; done ; \
	) > $@
###$_end-include: mk/Kyuafile.mk

test: Kyuafile
	kyua test

###$_begin-include: mk/rtest.mk
rtest: test
	@for i in $(SUBDIRS) ; do \
	  make -C "$$i" Kyuafile >/dev/null 2>&1 || continue ; \
	  make -C "$$i" rtest ; \
	done
###$_end-include: mk/rtest.mk

../pkg/cgilib.sh: $(SNIPPETS)
	###$_begin-include: mk/upx.mk
	#
	# Compressed/executable
	#
		mkdir -p $$(dirname $@) ; \
		(echo '#!/bin/sh'; \
			[ -f VERSION ] && echo "# $$(basename "$@") $$(cat VERSION)" ; \
			[ -f ../VERSION ] && echo "# $$(basename "$@") $$(cat ../VERSION)" ; \
			echo '# src: ' ; \
			echo '$^' | fmt | sed -e 's/^/#      /' ; \
			echo '#' ; \
			echo 'eval "$$( (base64 -d | gzip -d) <<'\'_EOF_\' ; \
			(for x in $^; do \
				echo '###$$_include:' $$x ; done) \
				| $(BINDER) $(OPTS) \
				| gzip -9 | base64  ; \
			echo '_EOF_' ; echo ')"' ) > $@
	###$_end-include: mk/upx.mk
